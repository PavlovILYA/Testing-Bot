package ru.mephi.knowledgechecker.common;

import ru.mephi.knowledgechecker.dto.telegram.outcome.MessageEntity;
import ru.mephi.knowledgechecker.dto.telegram.outcome.keyboard.KeyboardMarkup;
import ru.mephi.knowledgechecker.dto.telegram.outcome.params.SendMessageParams;
import ru.mephi.knowledgechecker.model.answer.OpenAnswer;
import ru.mephi.knowledgechecker.model.course.Course;
import ru.mephi.knowledgechecker.model.question.OpenQuestion;
import ru.mephi.knowledgechecker.model.question.VariableQuestion;
import ru.mephi.knowledgechecker.model.test.Test;

import java.util.List;

import static ru.mephi.knowledgechecker.common.CallbackDataType.TO_PRIVATE_TEST_LIST;
import static ru.mephi.knowledgechecker.common.CallbackDataType.TO_PUBLIC_TEST_LIST;
import static ru.mephi.knowledgechecker.common.KeyboardMarkups.getAddQuestionKeyboardMarkup;
import static ru.mephi.knowledgechecker.common.KeyboardMarkups.getAddWrongVariableAnswerKeyboardMarkup;
import static ru.mephi.knowledgechecker.common.ParamsWrapper.wrapMessageParams;

public class CommonMessageParams {
    public static SendMessageParams addingQuestionParams(Test test, Long userId, Course course) {
        String doneCallbackData = TO_PUBLIC_TEST_LIST.name();
        if (course != null) {
            doneCallbackData = TO_PRIVATE_TEST_LIST.name();
        }
        int questionCount = test.getVariableQuestions().size();
        questionCount += test.getOpenQuestions().size();
        String boldMessage = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞";
        String italicMessage =
                "\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: " + questionCount +
                        "\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: " + test.getMaxQuestionsNumber();
        return  wrapMessageParams(userId, boldMessage + italicMessage,
                List.of(new MessageEntity(TextType.BOLD, 0, boldMessage.length()),
                        new MessageEntity(TextType.ITALIC, boldMessage.length(), italicMessage.length())),
                getAddQuestionKeyboardMarkup(doneCallbackData));
    }

    public static SendMessageParams addingWrongAnswerParams(VariableQuestion question, Long userId) {
        String boldMessage = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞";
        String italicMessage = "\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: " + question.getWrongAnswers().size()
                + "\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: " + (question.getMaxAnswerNumber() - 1);
        return wrapMessageParams(userId, boldMessage + italicMessage,
                List.of(new MessageEntity(TextType.BOLD, 0, boldMessage.length()),
                        new MessageEntity(TextType.UNDERLINE, 11, 9),
                        new MessageEntity(TextType.ITALIC, boldMessage.length(), italicMessage.length())),
                getAddWrongVariableAnswerKeyboardMarkup());
    }

    public static SendMessageParams askSearchQueryParams(Long userId) {
        String boldMessage = "üîéÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å\n\n";
        String italicMessage = "(–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)" +
                "\n‚ùóÔ∏è –ß—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—ã–±–æ—Ä–∫–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø—Ä–æ—Å–∞–º, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, " +
                "—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π";
        return wrapMessageParams(userId, boldMessage + italicMessage,
                List.of(new MessageEntity(TextType.BOLD, 0, boldMessage.length()),
                        new MessageEntity(TextType.ITALIC, boldMessage.length(), italicMessage.length())),
                null);
    }

    public static SendMessageParams nothingIsFoundParams(Long userId) {
        String message = "–ü–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑üèº‚Äç";
        return wrapMessageParams(userId, message,
                List.of(new MessageEntity(TextType.BOLD, 0, message.length())),
                null);
    }

    public static SendMessageParams getOpenAnswerParams(OpenQuestion question, OpenAnswer answer, Long userId,
                                                        String boldMessage1, String boldMessage2, String boldMessage3,
                                                        KeyboardMarkup markup) {
        String message = boldMessage1 + question.getText() + boldMessage2 + answer.getText()
                + boldMessage3 + question.getCorrectAnswer();
        return wrapMessageParams(userId, message,
                List.of(new MessageEntity(TextType.BOLD, 0, boldMessage1.length()),
                        new MessageEntity(TextType.CODE, boldMessage1.length(), question.getText().length()),
                        new MessageEntity(TextType.BOLD,
                                boldMessage1.length() + question.getText().length(),
                                boldMessage2.length()),
                        new MessageEntity(TextType.CODE,
                                boldMessage1.length() + question.getText().length() + boldMessage2.length(),
                                answer.getText().length()),
                        new MessageEntity(TextType.BOLD,
                                message.length() - boldMessage3.length() - question.getCorrectAnswer().length(),
                                boldMessage3.length()),
                        new MessageEntity(TextType.SPOILER,
                                message.length() - question.getCorrectAnswer().length(),
                                question.getCorrectAnswer().length())),
                markup);
    }
}
