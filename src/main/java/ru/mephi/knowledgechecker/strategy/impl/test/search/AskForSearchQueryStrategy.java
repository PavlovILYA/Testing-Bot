package ru.mephi.knowledgechecker.strategy.impl.test.search;

import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import ru.mephi.knowledgechecker.common.TextType;
import ru.mephi.knowledgechecker.dto.telegram.income.Update;
import ru.mephi.knowledgechecker.dto.telegram.outcome.MessageEntity;
import ru.mephi.knowledgechecker.dto.telegram.outcome.params.SendMessageParams;
import ru.mephi.knowledgechecker.model.user.CurrentData;
import ru.mephi.knowledgechecker.state.impl.test.search.TestSearchAttemptState;
import ru.mephi.knowledgechecker.strategy.StrategyProcessException;
import ru.mephi.knowledgechecker.strategy.impl.AbstractCallbackQueryStrategy;

import java.util.List;

import static ru.mephi.knowledgechecker.common.Constants.FIND_PUBLIC_TEST;
import static ru.mephi.knowledgechecker.common.ParamsWrapper.wrapMessageParams;

@Slf4j
@Component
public class AskForSearchQueryStrategy extends AbstractCallbackQueryStrategy {
    public AskForSearchQueryStrategy(@Lazy TestSearchAttemptState testSearchAttemptState) {
        nextState = testSearchAttemptState;
    }

    @Override
    public boolean apply(Update update) {
        return super.apply(update)
                && (update.getCallbackQuery().getData().equals(FIND_PUBLIC_TEST));
    }

    @Override
    public void process(CurrentData data, Update update) throws StrategyProcessException {
        String boldMessage = "üîéÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å\n\n";
        String italicMessage = "(–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞)" +
                "\n‚ùóÔ∏è –ß—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—ã–±–æ—Ä–∫–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø—Ä–æ—Å–∞–º, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, " +
                "—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π";
        SendMessageParams params = wrapMessageParams(data.getUser().getId(), boldMessage + italicMessage,
                List.of(new MessageEntity(TextType.BOLD, 0, boldMessage.length()),
                        new MessageEntity(TextType.ITALIC, boldMessage.length(), italicMessage.length())),
                null);
        deleteMenu(data);
        data.setState(nextState);
        sendMessageAndSave(params, data);
    }
}
